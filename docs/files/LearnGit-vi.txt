
$ git init

# In Ra & Và Gán Một Số Biến Tùy Chỉnh Cơ Bản (Toàn cục - Global)
$ git config --global user.email
$ git config --global user.name

$ git config --global user.email "MyEmail@Zoho.com"
$ git config --global user.name "My Name"

# Xem nhanh các lệnh có sẵn
$ git help

# Xem tất các các lệnh
$ git help -a

# Lệnh help riêng biệt - tài liệu người dùng
# git help <command_here>
$ git help add
$ git help commit
$ git help init

# Sẽ hiển thị nhánh, các tập tin chưa track (chưa commit), các thay đổi và những khác biệt khác
$ git status

# Để xem các "tid bits" về git status
$ git help status

# thêm một file vào thư mục hiện tại
$ git add HelloWorld.java

# thêm một file vào một thư mục khác
$ git add /path/to/file/HelloWorld.c

# Hỗ trợ Regular Expression!
$ git add ./*.java

# liệt kê các branch đang có và ở remote
$ git branch -a

# tạo branch mới
$ git branch myNewBranch

# xóa một branch
$ git branch -d myBranch

# đặt tên lại một branch
# git branch -m <oldname> <newname>
$ git branch -m myBranchName myNewBranchName

# chỉnh sửa diễn giải của một branch
$ git branch myBranchName --edit-description

# Checkout (chuyển) một repo - mặc định là nhánh master
$ git checkout
# Checkout một nhánh cụ thể
$ git checkout branchName
# Tạo một nhánh mới và chuyển đến nó, tương tự: "git branch <name>; git checkout <name>"
$ git checkout -b newBranch

# Nhân bản learnxinyminutes-docs
$ git clone https://github.com/adambard/learnxinyminutes-docs.git

# commit với một ghi chú
$ git commit -m "Added multiplyNumbers() function to HelloWorld.c"

# Hiển thị sự khác biệt giữa thư mục hiện tại và index
$ git diff

# Hiển thị khác biệt giữa index và commit mới nhất.
$ git diff --cached

# Hiển thị khác biệt giữa thư mục đang làm việc và commit mới nhất
$ git diff HEAD

# Cảm ơn Travis Jeffery vì những lệnh này
# Đặt số của dòng được hiển thị trong kết quả tìm kiếm grep
$ git config --global grep.lineNumber true

# Làm cho kết quả tìm kiếm dễ đọc hơn, bao gồm cả gom nhóm
$ git config --global alias.g "grep --break --heading --line-number"

# Tìm "variableName" trong tất cả các file Java
$ git grep 'variableName' -- '*.java'

# Tìm một dòng mà có chứa "arrayListName" và, "add" hoặc "remove"
$ git grep -e 'arrayListName' --and \( -e add -e remove \)

# Hiện tất cả các commit
$ git log

# Hiện X commit
$ git log -n 10

# Chỉ hiện các commit đã merge merge commits
$ git log --merges

# Merge branch cụ thể vào branch hiện tại.
$ git merge branchName

# Luôn khởi tạo một merge commit khi trộn (merge)
$ git merge --no-ff branchName

# Đặt lại tên một file
$ git mv HelloWorld.c HelloNewWorld.c

# Di chuyển một file
$ git mv HelloWorld.c ./new/path/HelloWorld.c

# Buộc đặt lại tên hoặc di chuyển
# "existingFile" đã tồn tại trong thự mục, sẽ bị ghi đè
$ git mv -f myFile existingFile

# Cập nhật repo local của bạn, bằng cách merge các thay đổi mới
# từ remote "origin" và nhánh "master".
# git pull <remote> <branch>
# git pull => hoàn toàn mặc định như => git pull origin master
$ git pull origin master

# Merge các thay đổi từ remote branch và rebase
# các commit trong branch lên trên local repo, như sau: "git pull <remote> <branch>, git rebase <branch>"
$ git pull origin master --rebase

# Push và merge các thay đổi từ một repo local đến một
# remote có tên là "origin" và nhánh "master".
# git push <remote> <branch>
# git push => mặc định ẩn đến => git push origin master
$ git push origin master

# Để liên kết đến một branch local với một branch remote, thêm vào cờ -u:
$ git push -u origin master
# Từ lúc này, bất cứ khi nào bạn muốn push từ cùng một nhánh local đó, sử dụng lối tắt:
$ git push 

# Rebase experimentBranch lên master
# git rebase <basebranch> <topicbranch>
$ git rebase master experimentBranch

# Thiết lập lại staging area, để trùng với commit mới nhất (để thư mục không thay đổi)
$ git reset

#  Thiết lập lại staging area, để trùng với commit mới nhất, và ghi đè lên thư mục hiện tại
$ git reset --hard

# Di chuyển nhánh hiện tại đến một commit cụ thể (để thư mục không thay đổi)
# tất cả thay đổi vẫn duy trì trong thư mục.
$ git reset 31f2bb1

# Di chuyển nhánh hiện tại lùi về một commit cụ thể
# và làm cho thư mục hiện tại trùng (xóa các thay đổi chưa được commit và tất cả các commit
# sau một commit cụ thể).
$ git reset --hard 31f2bb1

# xóa HelloWorld.c
$ git rm HelloWorld.c

# Xóa file từ thư mục khác
$ git rm /pather/to/the/file/HelloWorld.c

